#!/bin/bash
#
# Run benchmarks


# Show help
Help()
{
	# Display Help
	echo "Run benchmarks for multithreaded SpMV or multithreaded GMRES in Julia."
	echo
	printf "Show command line arguments? ('y' or 'n'): "
	read -r
	arguments=$REPLY
	echo
	if [ "$arguments" == "y" ]; then
		echo -n "Solver? ('spmv' or 'gmres'): "
		read -r
		solver=$REPLY
		echo
	   	if [ "$solver" == "spmv" ]; then
	   		echo -n "Benchmark type? ('nthreads' or 'size'): "
	   		read -r
	   		bench=$REPLY
	   		echo
	   		if [ "$bench" == "nthreads" ]; then
	   			echo -n "Show detailed description of the command line arguments? ('y' or 'n'): "
	   			read -r
	   			detailed=$REPLY
	   			echo
	   			printf "./runbench spmv nthreads matrix size 'kernels' 'formats'"
	   			printf " 'minthread maxthread stepsize' nsamples"
	   			echo
	   			if [ "$detailed" == "y" ]; then
	   				printf "spmv:\t\t\t\t"
	   				printf " Benchmark sparse matrix-vetor product (SpMV)."
	   				echo
	   				printf "nthreads:\t\t\t"
	   				printf " Increase number of threads."
	   				echo
	   				printf "matrix:\t\t\t\t"
	   				printf " Test matrix, can be a matrix of MatrixDepot.jl or a"
	   				printf " matrix generated by sprand_sdd! from"
	   				printf " ExtendableSparse.jl ('fem2d')."
	   				echo 
	   				printf "'kernels':\t\t\t"
	   				printf " One or multiple SpMV kernels from SparseArrays ('ser')"
	   				printf " MtSpMV.jl ('par') or MKLSparse.jl ('mkl')."
	   				echo
	   				printf "'formats':\t\t\t"
	   				printf " One or multiple sparse matrix formats from"
	   				printf " CSC ('csc') or CSR ('csr')."
	   				echo
	   				printf "'minthread maxthread stepsize':\t" 
	   				printf " Minimal thread, maximal thread and stepsize."
	   				echo
	   				printf "nsamples:\t\t\t"
	   				printf " Number of samples."
	   				echo
	   			fi
	   		elif [ "$bench" == "size" ]; then
	   			echo -n "Show detailed description of the command line arguments? ('y' or 'n'):"
	   			read -r
	   			detailed=$REPLY
	   			echo
	   			printf "./runbench spmv nthreads matrix 'N0 ppomag nrun' 'kernels'"
	   			printf " 'formats' 'nthreads' nsamples"
	   			echo
	   			if [ "$detailed" == "y" ]; then
	   				printf "spmv:\t\t\t\t"
	   				printf " Benchmark sparse matrix-vetor product (SpMV)."
	   				echo
	   				printf "nthreads:\t\t\t"
	   				printf " Increase matrix size."
	   				echo
	   				printf "matrix:\t\t\t\t"
	   				printf " Test matrix, can be a matrix of MatrixDepot.jl or a"
	   				printf " matrix generated by sprand_sdd! from"
	   				printf " ExtendableSparse.jl ('fem2d')."
	   				echo 
	   				printf "'kernels':\t\t\t"
	   				printf " One or multiple SpMV kernels from SparseArrays ('ser')"
	   				printf " MtSpMV.jl ('par') or MKLSparse.jl ('mkl')."
	   				echo
	   				printf "'formats':\t\t\t"
	   				printf " One or multiple sparse matrix formats from"
	   				printf " CSC ('csc') or CSR ('csr')."
	   				echo
	   				printf "'nthreads':\t" 
	   				printf "One or multiple number of threads."
	   				echo
	   				printf "nsamples:\t\t\t"
	   				printf " Number of samples."
	   				echo
	   			fi
	   		fi
	   	elif [ "$solver" == "gmres" ]; then
	   		echo -n "Benchmark type? ('nthreads', 'size' or 'matrix'): "
	   		read -r
	   		bench=$REPLY
	   		echo
	   		if [ "$bench" == "nthreads" ]; then
	   			printf "Show detailed description of the command line arguments?"
	   			printf " ('y' or 'n'): "
	   			read -r
	   			detailed=$REPLY
	   			echo
	   			printf "./runbench spmv nthreads matrix size 'kernels' 'formats'"
	   			printf " 'minthread maxthread stepsize' nsamples niter small_tol"
	   			printf " omp_serial ser_threads count_flops"
	   			echo
	   			if [ "$detailed" == "y" ]; then
	   				printf "gmres:\t\t\t\t"
	   				printf " Benchmark GMRES."
	   				echo
	   				printf "nthreads:\t\t\t"
	   				printf " Increase number of threads."
	   				echo
	   				printf "matrix:\t\t\t\t"
	   				printf " Test matrix, can be a matrix of MatrixDepot.jl or a"
	   				printf " matrix generated by sprand_sdd! from"
	   				printf " ExtendableSparse.jl ('fem2d')."
	   				echo 
	   				printf "'kernels':\t\t\t"
	   				printf " One or multiple SpMV kernels from SparseArrays ('ser')"
	   				printf " MtSpMV.jl ('par') or MKLSparse.jl ('mkl')."
	   				echo
	   				printf "'formats':\t\t\t"
	   				printf " One or multiple sparse matrix formats from"
	   				printf " CSC ('csc') or CSR ('csr')."
	   				echo
	   				printf "'minthread maxthread stepsize':\t" 
	   				printf " Minimal thread, maximal thread and stepsize."
	   				echo
	   				printf "nsamples:\t\t\t"
	   				printf " Number of samples."
	   				echo
	   				printf "niter:\t\t\t\t"
	   				printf " Number of iterations."
	   				echo
	   				printf "small_tol: (optional)\t\t"
	   				printf " Very small convergence tolerance,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "omp_serial: (optional)\t\t"
	   				printf " Fix number of OMP threads to 1,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "ser_threads: (optional)\t\t"
	   				printf " Runs ser kernel for all threads,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "count_flops: (optional)\t\t"
	   				printf " Count flops,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   			fi
	   		elif [ "$bench" == "size" ]; then
	   			printf "Show detailed description of the command line arguments?"
	   			printf " ('y' or 'n'): "
	   			read -r
	   			detailed=$REPLY
	   			echo
	   			printf "./runbench spmv nthreads matrix size 'kernels' 'formats'"
	   			printf " 'nthreads' nsamples niter small_tol omp_serial ser_threads"
	   			printf " count_flops"
	   			echo
	   			if [ "$detailed" == "y" ]; then
	   				printf "gmres:\t\t\t\t"
	   				printf " Benchmark GMRES."
	   				echo
	   				printf "nthreads:\t\t\t"
	   				printf " Increase matrix size."
	   				echo
	   				printf "matrix:\t\t\t\t"
	   				printf " Test matrix, can be a matrix of MatrixDepot.jl or a"
	   				printf " matrix generated by sprand_sdd! from"
	   				printf " ExtendableSparse.jl ('fem2d')."
	   				echo 
	   				printf "'kernels':\t\t\t"
	   				printf " One or multiple SpMV kernels from SparseArrays ('ser')"
	   				printf " MtSpMV.jl ('par') or MKLSparse.jl ('mkl')."
	   				echo
	   				printf "'formats':\t\t\t"
	   				printf " One or multiple sparse matrix formats from"
	   				printf " CSC ('csc') or CSR ('csr')."
	   				echo
	   				printf "'nthreads':\t\t\t" 
	   				printf " One or multiple number of threads."
	   				echo
	   				printf "nsamples:\t\t\t"
	   				printf " Number of samples."
	   				echo
	   				printf "niter:\t\t\t\t"
	   				printf " Number of iterations."
	   				echo
	   				printf "small_tol: (optional)\t\t"
	   				printf " Very small convergence tolerance,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "omp_serial: (optional)\t\t"
	   				printf " Fix number of OMP threads to 1,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "ser_threads: (optional)\t\t"
	   				printf " Runs ser kernel for all threads,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "count_flops: (optional)\t\t"
	   				printf " Count flops,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   			fi
	   		elif [ "$bench" == "matrix" ]; then
	   			printf "Show detailed description of the command line arguments?"
	   			printf " ('y' or 'n'): "
	   			read -r
	   			detailed=$REPLY
	   			echo
	   			printf "./runbench spmv nthreads 'matrices' size kernel format"
	   			printf " nthreads nsamples niter small_tol omp_serial ser_threads" 
	   			printf " count_flops"
	   			echo
	   			if [ "$detailed" == "y" ]; then
	   				printf "gmres:\t\t\t\t"
	   				printf " Benchmark GMRES."
	   				echo
	   				printf "nthreads:\t\t\t"
	   				printf " Increase matrix size."
	   				echo
	   				printf "'matrices':\t\t\t"
	   				printf " Multiple test matrices from MatrixDepot.jl or generated"
	   				printf " by sprand_sdd! from ExtendableSparse.jl ('fem2d')."
	   				echo 
	   				printf "kernel:\t\t\t\t"
	   				printf " SpMV kernel from SparseArrays ('ser')"
	   				printf " MtSpMV.jl ('par') or MKLSparse.jl ('mkl')."
	   				echo
	   				printf "format:\t\t\t\t"
	   				printf " Sparse matrix format from"
	   				printf " CSC ('csc') or CSR ('csr')."
	   				echo
	   				printf "nthreads:\t\t\t" 
	   				printf " Number of threads."
	   				echo
	   				printf "nsamples:\t\t\t"
	   				printf " Number of samples."
	   				echo
	   				printf "niter:\t\t\t\t"
	   				printf " Number of iterations."
	   				echo
	   				printf "small_tol: (optional)\t\t"
	   				printf " Very small convergence tolerance,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "omp_serial: (optional)\t\t"
	   				printf " Fix number of OMP threads to 1,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "ser_threads: (optional)\t\t"
	   				printf " Runs ser kernel for all threads,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   				printf "count_flops: (optional)\t\t"
	   				printf " Count flops,"
	   				printf " 'true' or 'false' (default)."
	   				echo
	   			fi
	   		fi
	   	fi
	   	echo
   	fi
}

while getopts ":h" option; do
   case $option in
      h) # display Help
         Help
         exit;;
   esac
done


# Ceck if config file exists and if not create and ask for settings
FILE=config.txt
if [ ! -f "$FILE" ]; then
	echo -n "Symbolic link to Julia OpenBLAS version: "
	read -r
	echo $REPLY >> $FILE
	echo -n "Symbolic link to Julia MKL version: "
	read -r
	echo $REPLY >> $FILE
	echo -n "Plots.jl backend (optional): "
	read -r
	echo $REPLY >> $FILE
fi


# Run benchmarks
if [ "$1" == "spmv" ]; then
	./runbench_spmv "$2" "$3" "$4" "$5" "$6" "$7" "$8"
elif [ "$1" == "gmres" ]; then
	./runbench_gmres "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${11}" \
	 	"${12}" "${13}" "${14}" "${15}"
fi
